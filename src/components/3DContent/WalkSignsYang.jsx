/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState, useEffect } from "react";
import { useFrame} from '@react-three/fiber'
import { useGLTF } from "@react-three/drei";
import { Bloom, EffectComposer } from  "@react-three/postprocessing"
import * as THREE from 'three'

const glowRed = new THREE.MeshBasicMaterial({ color: new THREE.Color(7, 0, 0.5), toneMapped: false })


export function WalkSignsYang(props) {

    const [walking, setWalking] = useState(false)
    const { nodes, materials } = useGLTF("/StreetPole.glb");


    useEffect(() => {
        const interval = setInterval(() => {
            console.log(walking)
            setWalking(walking => !walking);
            console.log(interval)
            console.log(walking)

        }, 10000);

        return () =>  clearInterval(interval);
    }, []);


    const walk1 = useRef();
    const walk2 = useRef();

    // useFrame(({clock}) => {
    //     let time =+ clock.getElapsedTime()
    //     // console.log(time)
    //     if (time === 8 ) {
    //         setWalking(!walking)
    //         // console.log('greater than')
            

    //     }
    // })

        {/* <EffectComposer multisampling={0}>
            <Bloom 
                // mipmapBlur
                intensity={0.2}
            />
        </EffectComposer> */}
    
    return (walking ?
        <>
            <group {...props} dispose={null} onClick={() => setWalking(!walking)}>            
            <group ref={walk1}>
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Walking_Body.geometry}
                    material={materials["Walking Blue"]}
                    position={[-1.73506916, 2.11856818, -5.40214205]}
                    rotation={[0, 0, -Math.PI / 2]}
                    scale={0.13533798}
                >    
                </mesh>
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Walking_Head.geometry}
                    material={materials["Walking Blue"]}
                    position={[-1.74411643, 2.30201936, -5.3987174]}
                    scale={[0.03004681, 0.00132183, 0.03004681]}
                />
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Walking_Hand001.geometry}
                    material={glowRed}
                    position={[-1.32919741, 2.66963959, -5.04350376]}                    
                    rotation={[Math.PI / 2, -Math.PI / 2, 0]}
                    scale={0.12551796}
                    />
            </group> 
            
        </group>
        </> 
        :
        <>
        <group {...props} dispose={null} onClick={() => setWalking(!walking)}>
            <group ref={walk2}>
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Walking_Body001.geometry}
                    material={materials["Walking Blue"]}
                    position={[-1.23949528, 2.6233201, -4.9567194]}
                    rotation={[Math.PI / 2, -Math.PI / 2, 0]}
                    scale={0.13533798}
                    />
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Walking_Head001.geometry}
                    material={materials["Walking Blue"]}
                    position={[-1.24291992, 2.80677128, -4.96576691]}
                    rotation={[0, -Math.PI / 2, 0]}
                    scale={[0.03004681, 0.00132183, 0.03004681]}
                    />
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Walking_Hand.geometry}
                    material={glowRed}
                    position={[-1.8218534, 2.16488767, -5.31243992]}
                    rotation={[0, 0, -Math.PI / 2]}
                    scale={0.12551796}
                />
            </group>
        </group>
        </>)
    ;
}

useGLTF.preload("/StreetPole.glb");
